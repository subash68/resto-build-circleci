// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	// Request
	Request(ctx context.Context, in *RequestOrderRequest, opts ...grpc.CallOption) (*RequestOrder, error)
	// InPreparation
	Preparation(ctx context.Context, in *InPreparationRequest, opts ...grpc.CallOption) (*InPreparation, error)
	// EnRoute
	Route(ctx context.Context, in *EnRouteRequest, opts ...grpc.CallOption) (*EnRoute, error)
	// Delivered
	Deliver(ctx context.Context, in *DeliveredRequest, opts ...grpc.CallOption) (*Delivered, error)
	// Disputed
	Dispute(ctx context.Context, in *DisputedRequest, opts ...grpc.CallOption) (*Disputed, error)
	// Refunded
	Refund(ctx context.Context, in *RefundedRequest, opts ...grpc.CallOption) (*Refunded, error)
	// Canceled
	Cancel(ctx context.Context, in *CanceledRequest, opts ...grpc.CallOption) (*Canceled, error)
	// Finished
	Finish(ctx context.Context, in *FinishedRequest, opts ...grpc.CallOption) (*Finished, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) Request(ctx context.Context, in *RequestOrderRequest, opts ...grpc.CallOption) (*RequestOrder, error) {
	out := new(RequestOrder)
	err := c.cc.Invoke(ctx, "/order.OrderService/Request", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) Preparation(ctx context.Context, in *InPreparationRequest, opts ...grpc.CallOption) (*InPreparation, error) {
	out := new(InPreparation)
	err := c.cc.Invoke(ctx, "/order.OrderService/Preparation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) Route(ctx context.Context, in *EnRouteRequest, opts ...grpc.CallOption) (*EnRoute, error) {
	out := new(EnRoute)
	err := c.cc.Invoke(ctx, "/order.OrderService/Route", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) Deliver(ctx context.Context, in *DeliveredRequest, opts ...grpc.CallOption) (*Delivered, error) {
	out := new(Delivered)
	err := c.cc.Invoke(ctx, "/order.OrderService/Deliver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) Dispute(ctx context.Context, in *DisputedRequest, opts ...grpc.CallOption) (*Disputed, error) {
	out := new(Disputed)
	err := c.cc.Invoke(ctx, "/order.OrderService/Dispute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) Refund(ctx context.Context, in *RefundedRequest, opts ...grpc.CallOption) (*Refunded, error) {
	out := new(Refunded)
	err := c.cc.Invoke(ctx, "/order.OrderService/Refund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) Cancel(ctx context.Context, in *CanceledRequest, opts ...grpc.CallOption) (*Canceled, error) {
	out := new(Canceled)
	err := c.cc.Invoke(ctx, "/order.OrderService/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) Finish(ctx context.Context, in *FinishedRequest, opts ...grpc.CallOption) (*Finished, error) {
	out := new(Finished)
	err := c.cc.Invoke(ctx, "/order.OrderService/Finish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility
type OrderServiceServer interface {
	// Request
	Request(context.Context, *RequestOrderRequest) (*RequestOrder, error)
	// InPreparation
	Preparation(context.Context, *InPreparationRequest) (*InPreparation, error)
	// EnRoute
	Route(context.Context, *EnRouteRequest) (*EnRoute, error)
	// Delivered
	Deliver(context.Context, *DeliveredRequest) (*Delivered, error)
	// Disputed
	Dispute(context.Context, *DisputedRequest) (*Disputed, error)
	// Refunded
	Refund(context.Context, *RefundedRequest) (*Refunded, error)
	// Canceled
	Cancel(context.Context, *CanceledRequest) (*Canceled, error)
	// Finished
	Finish(context.Context, *FinishedRequest) (*Finished, error)
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (UnimplementedOrderServiceServer) Request(context.Context, *RequestOrderRequest) (*RequestOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request not implemented")
}
func (UnimplementedOrderServiceServer) Preparation(context.Context, *InPreparationRequest) (*InPreparation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Preparation not implemented")
}
func (UnimplementedOrderServiceServer) Route(context.Context, *EnRouteRequest) (*EnRoute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Route not implemented")
}
func (UnimplementedOrderServiceServer) Deliver(context.Context, *DeliveredRequest) (*Delivered, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deliver not implemented")
}
func (UnimplementedOrderServiceServer) Dispute(context.Context, *DisputedRequest) (*Disputed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dispute not implemented")
}
func (UnimplementedOrderServiceServer) Refund(context.Context, *RefundedRequest) (*Refunded, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refund not implemented")
}
func (UnimplementedOrderServiceServer) Cancel(context.Context, *CanceledRequest) (*Canceled, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedOrderServiceServer) Finish(context.Context, *FinishedRequest) (*Finished, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Finish not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).Request(ctx, req.(*RequestOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_Preparation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InPreparationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).Preparation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/Preparation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).Preparation(ctx, req.(*InPreparationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_Route_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).Route(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/Route",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).Route(ctx, req.(*EnRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_Deliver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).Deliver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/Deliver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).Deliver(ctx, req.(*DeliveredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_Dispute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisputedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).Dispute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/Dispute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).Dispute(ctx, req.(*DisputedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_Refund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).Refund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/Refund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).Refund(ctx, req.(*RefundedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanceledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).Cancel(ctx, req.(*CanceledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_Finish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).Finish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/Finish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).Finish(ctx, req.(*FinishedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Request",
			Handler:    _OrderService_Request_Handler,
		},
		{
			MethodName: "Preparation",
			Handler:    _OrderService_Preparation_Handler,
		},
		{
			MethodName: "Route",
			Handler:    _OrderService_Route_Handler,
		},
		{
			MethodName: "Deliver",
			Handler:    _OrderService_Deliver_Handler,
		},
		{
			MethodName: "Dispute",
			Handler:    _OrderService_Dispute_Handler,
		},
		{
			MethodName: "Refund",
			Handler:    _OrderService_Refund_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _OrderService_Cancel_Handler,
		},
		{
			MethodName: "Finish",
			Handler:    _OrderService_Finish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order-service.proto",
}
